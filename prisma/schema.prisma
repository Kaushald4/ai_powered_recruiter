datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

enum JobStatus {
    ACTIVE
    INACTIVE
}

enum UserRole {
    CANDIDATE
    RECRUITER
}

model User {
    id          Int     @id @default(autoincrement())
    name        String
    email       String
    password    String
    phoneNumber String?
    companyName String?
    yoe         String?
    cv_url      String?

    role         UserRole       @default(RECRUITER)
    JobPost      JobPost[]
    InterviewDtl InterviewDtl[]
}

model CustomizedQuestion {
    id        Int     @id @default(autoincrement())
    title     String
    jobPost   JobPost @relation(fields: [jobPostId], references: [id])
    jobPostId Int
}

model JobPost {
    id              Int                  @id @default(autoincrement())
    title           String
    location        String
    experienceLevel String
    jobDetails      String
    totalQuestions  Int?
    questions       CustomizedQuestion[]
    questionGenMode String
    jobCategory     String
    status          JobStatus            @default(ACTIVE)
    companyName     String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    author       User           @relation(fields: [authorId], references: [id])
    authorId     Int
    InterviewDtl InterviewDtl[]
}

model InterviewQuestion {
    id                Int           @id @default(autoincrement())
    title             String
    InterviewDtl      InterviewDtl? @relation(fields: [interviewDtlId], references: [id])
    interviewDtlId    Int?
    answer_transcript String?
}

model InterviewDtl {
    id                 Int                 @id @default(autoincrement())
    jobPost            JobPost             @relation(fields: [jobPostId], references: [id])
    jobPostId          Int
    user               User                @relation(fields: [userId], references: [id])
    userId             Int
    interviewQuestions InterviewQuestion[]
    video_link         String?
    is_completed       Boolean             @default(false)
    candidateSummary   String?
    candidateScore     String?
    recruiter          String?
}
